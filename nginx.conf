# Nginx configuration for TaskWarrior-NG with MCPO
# This configuration allows serving both frontend and API on a single port
# with proper /api routing

events {
    worker_connections 1024;
}

http {
    # Upstream for frontend
    upstream frontend {
        server localhost:3033;
    }
    
    # Upstream for MCPO API
    upstream mcpo_api {
        server localhost:8885;
    }
    
    server {
        listen 8080;  # Single port for both frontend and API
        server_name localhost;
        
        # Frontend - serve everything except /api
        location / {
            proxy_pass http://frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
        }
        
        # API - route /api/* to MCPO, stripping the /api prefix
        location /api/ {
            # Remove /api prefix when forwarding to MCPO
            rewrite ^/api/(.*) /$1 break;
            
            proxy_pass http://mcpo_api;
            proxy_http_version 1.1;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            
            # Pass through the Authorization header for API key
            proxy_set_header Authorization $http_authorization;
            
            # CORS headers if needed
            add_header 'Access-Control-Allow-Origin' '*' always;
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type' always;
            
            # Handle OPTIONS requests for CORS preflight
            if ($request_method = 'OPTIONS') {
                return 204;
            }
        }
        
        # Special handling for WebSocket connections (if needed by frontend)
        location /ws {
            proxy_pass http://frontend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
        }
    }
}